generator kysely {
  provider = "prisma-kysely"
}

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

generator zod {
  provider             = "zod-prisma-types"
  createInputTypes     = false
  writeBarrelFiles     = false
  useMultipleFiles     = true
  useDefaultValidators = false
}

datasource db {
  provider  = "postgresql"
  url       = env("NEXT_PRIVATE_DATABASE_URL")
  directUrl = env("NEXT_PRIVATE_DIRECT_DATABASE_URL")
}

// Todo: (RR7) Remove after RR7 migration.
enum IdentityProvider {
  DOCUMENSO
  GOOGLE
  OIDC
}

enum Role {
  ADMIN
  USER
}


model User {
  id               Int              @id @default(autoincrement())
  name             String?
  customerId       String?          @unique
  email            String           @unique
  emailVerified    DateTime?
  password         String? // Todo: (RR7) Remove after RR7 migration.
  source           String?
  signature        String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  lastSignedIn     DateTime         @default(now())
  roles            Role[]           @default([USER])
  identityProvider IdentityProvider @default(DOCUMENSO) // Todo: (RR7) Remove after RR7 migration.
  avatarImageId    String?
  disabled         Boolean          @default(false)

  accounts             Account[]
  sessions             Session[]
  documents            Document[]
  folders              Folder[]
  subscriptions        Subscription[]
  passwordResetTokens  PasswordResetToken[]
  ownedTeams           Team[]
  ownedPendingTeams    TeamPending[]
  teamMembers          TeamMember[]
  twoFactorSecret      String?
  twoFactorEnabled     Boolean              @default(false)
  twoFactorBackupCodes String?
  url                  String?              @unique

  profile            UserProfile?
  verificationTokens VerificationToken[]
  apiTokens          ApiToken[]
  templates          Template[]
  taskAssignees      TaskAssignee[]
  chat               Chat[]
  taskComments       TaskComment[]
  taskAttachments    TaskAttachment[]
  taskSubtasks       Task[]
  securityAuditLogs  UserSecurityAuditLog[]
  webhooks           Webhook[]
  siteSettings       SiteSettings[]
  passkeys           Passkey[]
  avatarImage        AvatarImage?           @relation(fields: [avatarImageId], references: [id], onDelete: SetNull)
  // lpms               Lpm[]

  @@index([email])
}

model Lpm {
  id                                  Int      @id @default(autoincrement())
  productId                           String
  productType                         String   @map("Product Type") @db.VarChar
  productTitle                        String   @map("Product Title") @db.VarChar
  productVersion                      String?  @map("Product Version") @db.VarChar
  productDisplayArtist                String   @map("Product Display Artist") @db.VarChar
  parentLabel                         String?  @map("Parent Label") @db.VarChar
  label                               String   @db.VarChar
  originalReleaseDate                 String?  @map("Original Release Date") @db.VarChar
  releaseDate                         String   @map("Release Date") @db.VarChar
  upc                                 String   @map("UPC") @db.VarChar
  catalog                             String   @map("Catalog ") @db.VarChar
  productPriceTier                    String?  @map("Product Price Tier") @db.VarChar
  productGenre                        String   @map("Product Genre") @db.VarChar
  submissionStatus                    String   @map("Submission Status") @db.VarChar
  productCLine                        String   @map("Product C Line") @db.VarChar
  productPLine                        String   @map("Product P Line") @db.VarChar
  preOrderDate                        String?  @map("PreOrder Date") @db.VarChar
  exclusives                          String?  @map("Exclusives") @db.VarChar
  explicitLyrics                      String   @map("ExplicitLyrics") @db.VarChar
  productPlayLink                     String?  @map("Product Play Link") @db.VarChar
  linerNotes                          String?  @map("Liner Notes") @db.VarChar
  primaryMetadataLanguage             String   @map("Primary Metadata Language") @db.VarChar
  compilation                         String?  @map("Compilation") @db.VarChar
  pdfBooklet                          String?  @map("PDF Booklet") @db.VarChar
  timedReleaseDate                    String?  @map("Timed Release Date") @db.VarChar
  timedReleaseMusicServices           String?  @map("Timed Release Music Services") @db.VarChar
  lastProcessDate                     String   @map("Last Process Date") @db.VarChar
  importDate                          String   @map("Import Date") @db.VarChar
  createdBy                           String   @map("Created By") @db.VarChar
  lastModified                        String   @map("Last Modified") @db.VarChar
  submittedAt                         String?  @map("Submitted At") @db.VarChar
  submittedBy                         String?  @map("Submitted By") @db.VarChar
  vevoChannel                         String?  @map("Vevo Channel") @db.VarChar
  trackType                           String   @map("TrackType") @db.VarChar
  trackId                             String   @map("Track Id") @db.VarChar
  trackVolume                         Boolean? @map("Track Volume")
  trackNumber                         String   @map("Track Number") @db.VarChar
  trackName                           String   @map("Track Name") @db.VarChar
  trackVersion                        String?  @map("Track Version") @db.VarChar
  trackDisplayArtist                  String   @map("Track Display Artist") @db.VarChar
  isrc                                String   @map("Isrc") @db.VarChar
  trackPriceTier                      String?  @map("Track Price Tier") @db.VarChar
  trackGenre                          String   @map("Track Genre") @db.VarChar
  audioLanguage                       String   @map("Audio Language") @db.VarChar
  trackCLine                          String   @map("Track C Line") @db.VarChar
  trackPLine                          String   @map("Track P Line") @db.VarChar
  writersComposers                    String   @map("WritersComposers") @db.VarChar
  publishersCollectionSocieties       String   @map("PublishersCollection Societies") @db.VarChar
  withholdMechanicals                 String   @map("Withhold Mechanicals") @db.VarChar
  preOrderType                        String?  @map("PreOrder Type") @db.VarChar
  instantGratificationDate            String?  @map("Instant Gratification Date") @db.VarChar
  duration                            String   @map("Duration") @db.VarChar
  sampleStartTime                     String?  @map("Sample Start Time") @db.VarChar
  explicitLyricsTrack                 String   @map("Explicit Lyrics") @db.VarChar
  albumOnly                           String   @map("Album Only") @db.VarChar
  lyrics                              String?  @map("Lyrics") @db.VarChar
  writersId                           Int?
  writers                             Writers? @relation(fields: [writersId], references: [id], onDelete: Cascade)
  additionalContributorsPerforming    String?  @map("AdditionalContributorsPerforming") @db.VarChar
  additionalContributorsNonPerforming String?  @map("AdditionalContributorsNonPerforming") @db.VarChar
  producers                           String?  @map("Producers") @db.VarChar
  continuousMix                       String?  @map("Continuous Mix") @db.VarChar
  continuouslyMixedIndividualSong     String?  @map("Continuously Mixed Individual Song") @db.VarChar
  trackPlayLink                       String?  @map("Track Play Link") @db.VarChar

}

model Songs {
  id                Int          @id @default(autoincrement())
  name              String?
  author            String?
  teamId            Int
  team              Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  publisherMexico   String?
  publisherUSA      String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now()) @updatedAt
  disabled          Boolean      @default(false)
  artists           Artist[]
  url               String?      @unique
  type              SongType[]
  status            SongStatus[]
  uniqueIdentifier  String?      @unique @default(cuid())
  royaltyPercentage String?
  // artistId          Int?
  // artist            Artist?      @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

enum TypeSongAlbum {
  SONG
  ALBUM
}

enum StatusSongAlbum {
  DELETED
  RELEASED
  PENDING
  DRAFT
}

enum SongStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SongType {
  MASTER
  MECHANICAL
  PERFORMANCE
  SYNCHRONIZATION
}

model Writers{
  id            Int            @id @default(autoincrement())
  name          String?
  createdAt     DateTime       @default(now())
  teamId        Int?
  // team          Team?           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  updatedAt     DateTime       @default(now()) @updatedAt
  songroles         songRoles[]         @default([WRITER])
  avatarImageId String?
  disabled      Boolean?       @default(false)
  // event         Event[]
  lpm          Lpm[]
  url           String?        @unique

  // ArtistProfile ArtistProfile?

}

enum songRoles {
  WRITER
  COMPOSER
  ARRANGER
  PRODUCER
  MIXER
  MASTERING_ENGINEER
}


model Artist {
  id            Int            @id @default(autoincrement())
  name          String?
  createdAt     DateTime       @default(now())
  teamId        Int?
  team          Team?           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  updatedAt     DateTime       @default(now()) @updatedAt
  roles         Role[]         @default([USER])
  avatarImageId String?
  disabled      Boolean?       @default(false)
  event         Event[]
  url           String?        @unique
  ArtistProfile ArtistProfile?
  songs         Songs[]
  isrcSongs     IsrcSongs[]    // Added for many-to-many relation with IsrcSongs

}

model IsrcSongs{
  id           Int            @id @default(autoincrement())
  date       String?
  isrc       String?
  artist     String?
  duration   String?
  trackName  String?
  title      String?
  license   String?
  memebers           Artist[]
}

model ArtistProfile {
  id       String  @id @default(cuid())
  enabled  Boolean @default(false)
  artistId Int     @unique
  bio      String?

  Artist Artist? @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

// Events table
model Event {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(300)
  description String?   @db.VarChar(200)
  image       String?   @db.Text
  // teamId      Int?
  venue       String?   @db.VarChar(300)
  artists     Artist[]
  beginning   DateTime  @default(now())
  end         DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // team         Team?         @relation(fields: [teamId], references: [id])
  ticketTypes  TicketType[]
  ticketBuyers TicketBuyer[]
}

// Buyers table
model Buyer {
  id               String    @id @default(cuid())
  password         String?
  uid              String?
  rfc              String?   @unique @db.VarChar(13)
  fullname         String    @db.VarChar(250)
  email            String    @unique @db.VarChar(250)
  image            String?   @db.Text
  emailVerified    DateTime?
  phoneNumber      String?   @db.VarChar(20)
  stripeCustomerId String    @unique @db.VarChar(255)
  createdAt        DateTime  @default(now())
  deletedAt        DateTime?

  ticketBuyers TicketBuyer[]
}

// Ticket types table
model TicketType {
  id                 Int       @id @default(autoincrement())
  name               String?   @db.VarChar(100)
  eventId            Int
  price              Int?
  uid                String?
  maxQuantityPerUser Int       @default(5)
  quantity           Int?
  available          Int?
  description        String?
  seatNumber         Int?
  stripeProductId    String?   @db.Text
  stripePriceId      String?   @db.Text
  imageUrl           String?   @db.Text
  status             String    @default("valid") @db.VarChar(20)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?

  event Event @relation(fields: [eventId], references: [id])
}

// Tickets buyers table
model TicketBuyer {
  id              Int       @id @default(autoincrement())
  name            String?   @db.VarChar(100)
  eventId         Int
  buyerId         String
  ticketId        Int?
  price           Int?
  quantity        Int?
  stripeProductId String?   @db.Text
  imageUrl        String?   @db.Text
  status          String    @default("valid") @db.VarChar(20)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  event Event @relation(fields: [eventId], references: [id])
  buyer Buyer @relation(fields: [buyerId], references: [id])
}

model UserProfile {
  id      String  @id @default(cuid())
  enabled Boolean @default(false)
  userId  Int     @unique
  bio     String?

  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeamProfile {
  id      String  @id @default(cuid())
  enabled Boolean @default(false)
  teamId  Int     @unique
  bio     String?

  team Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum UserSecurityAuditLogType {
  ACCOUNT_PROFILE_UPDATE
  ACCOUNT_SSO_LINK
  AUTH_2FA_DISABLE
  AUTH_2FA_ENABLE
  PASSKEY_CREATED
  PASSKEY_DELETED
  PASSKEY_UPDATED
  PASSWORD_RESET
  PASSWORD_UPDATE
  SIGN_OUT
  SIGN_IN
  SIGN_IN_FAIL
  SIGN_IN_2FA_FAIL
  SIGN_IN_PASSKEY_FAIL
}

model UserSecurityAuditLog {
  id        Int                      @id @default(autoincrement())
  userId    Int
  createdAt DateTime                 @default(now())
  type      UserSecurityAuditLogType
  userAgent String?
  ipAddress String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  expiry    DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Passkey {
  id                   String    @id @default(cuid())
  userId               Int
  name                 String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now())
  lastUsedAt           DateTime?
  credentialId         Bytes
  credentialPublicKey  Bytes
  counter              BigInt
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AnonymousVerificationToken {
  id        String   @id @unique @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model VerificationToken {
  id          Int      @id @default(autoincrement())
  secondaryId String   @unique @default(cuid())
  identifier  String
  token       String   @unique
  completed   Boolean  @default(false)
  expires     DateTime
  createdAt   DateTime @default(now())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum WebhookTriggerEvents {
  DOCUMENT_CREATED
  DOCUMENT_SENT
  DOCUMENT_OPENED
  DOCUMENT_SIGNED
  DOCUMENT_COMPLETED
  DOCUMENT_REJECTED
  DOCUMENT_CANCELLED
}

model Webhook {
  id            String                 @id @default(cuid())
  webhookUrl    String
  eventTriggers WebhookTriggerEvents[]
  secret        String?
  enabled       Boolean                @default(true)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @default(now()) @updatedAt
  userId        Int
  user          User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId        Int?
  team          Team?                  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  webhookCalls  WebhookCall[]
}

enum WebhookCallStatus {
  SUCCESS
  FAILED
}

model WebhookCall {
  id              String               @id @default(cuid())
  status          WebhookCallStatus
  url             String
  event           WebhookTriggerEvents
  requestBody     Json
  responseCode    Int
  responseHeaders Json?
  responseBody    Json?
  createdAt       DateTime             @default(now())
  webhookId       String
  webhook         Webhook              @relation(fields: [webhookId], references: [id], onDelete: Cascade)
}

enum ApiTokenAlgorithm {
  SHA512
}

model ApiToken {
  id        Int               @id @default(autoincrement())
  name      String
  token     String            @unique
  algorithm ApiTokenAlgorithm @default(SHA512)
  expires   DateTime?
  createdAt DateTime          @default(now())
  userId    Int?
  user      User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId    Int?
  team      Team?             @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  INACTIVE
}

model Subscription {
  id                Int                @id @default(autoincrement())
  status            SubscriptionStatus @default(INACTIVE)
  planId            String             @unique
  priceId           String
  periodEnd         DateTime?
  userId            Int?
  teamId            Int?               @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  cancelAtPeriodEnd Boolean            @default(false)

  team Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  // Some providers return created_at so we need to make it optional
  created_at        Int?
  // Stops next-auth from crashing when dealing with AzureAD
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  password          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String @id @default(cuid())
  sessionToken String @unique
  userId       Int

  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum DocumentStatus {
  DRAFT
  PENDING
  COMPLETED
  REJECTED
}

enum DocumentSource {
  DOCUMENT
  TEMPLATE
  TEMPLATE_DIRECT_LINK
}

enum DocumentVisibility {
  EVERYONE
  MANAGER_AND_ABOVE
  ADMIN
}

enum FolderType {
  DOCUMENT
  TEMPLATE
}

model Folder {
  id         String             @id @default(cuid())
  name       String
  userId     Int
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId     Int?
  team       Team?              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  pinned     Boolean            @default(false)
  parentId   String?
  parent     Folder?            @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: Cascade)
  documents  Document[]
  templates  Template[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @default(now()) @updatedAt
  subfolders Folder[]           @relation("FolderToFolder")
  visibility DocumentVisibility @default(EVERYONE)
  type       FolderType

  @@index([userId])
  @@index([teamId])
  @@index([parentId])
  @@index([type])
}

/// @zod.import(["import { ZDocumentAuthOptionsSchema } from '@documenso/lib/types/document-auth';", "import { ZDocumentFormValuesSchema } from '@documenso/lib/types/document-form-values';"])
model Document {
  id             Int                 @id @default(autoincrement())
  qrToken        String? /// @zod.string.describe("The token for viewing the document using the QR code on the certificate.")
  externalId     String? /// @zod.string.describe("A custom external ID you can use to identify the document.")
  userId         Int /// @zod.number.describe("The ID of the user that created this document.")
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  authOptions    Json? /// [DocumentAuthOptions] @zod.custom.use(ZDocumentAuthOptionsSchema)
  formValues     Json? /// [DocumentFormValues] @zod.custom.use(ZDocumentFormValuesSchema)
  visibility     DocumentVisibility  @default(EVERYONE)
  title          String
  status         DocumentStatus      @default(DRAFT)
  recipients     Recipient[]
  fields         Field[]
  shareLinks     DocumentShareLink[]
  documentDataId String
  documentMeta   DocumentMeta?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @default(now()) @updatedAt
  completedAt    DateTime?
  deletedAt      DateTime?
  teamId         Int?
  templateId     Int?
  source         DocumentSource
  chat           Chat[]

  useLegacyFieldInsertion Boolean @default(false)

  documentData DocumentData @relation(fields: [documentDataId], references: [id], onDelete: Cascade)
  team         Team?        @relation(fields: [teamId], references: [id])
  template     Template?    @relation(fields: [templateId], references: [id], onDelete: SetNull)

  auditLogs DocumentAuditLog[]
  folder    Folder?            @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId  String?

  @@unique([documentDataId])
  @@index([userId])
  @@index([status])
  @@index([folderId])
}

model DocumentAuditLog {
  id         String   @id @default(cuid())
  documentId Int
  createdAt  DateTime @default(now())
  type       String
  data       Json

  // Details of the person who performed the action which caused the audit log.
  name      String?
  email     String?
  userId    Int?
  userAgent String?
  ipAddress String?

  Document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

enum DocumentDataType {
  S3_PATH
  BYTES
  BYTES_64
}

enum DocumentSigningOrder {
  PARALLEL
  SEQUENTIAL
}

model DocumentData {
  id          String           @id @default(cuid())
  type        DocumentDataType
  data        String
  initialData String
  document    Document?
  template    Template?
}

enum DocumentDistributionMethod {
  EMAIL
  NONE
}

/// @zod.import(["import { ZDocumentEmailSettingsSchema } from '@documenso/lib/types/document-email';"])
model DocumentMeta {
  id                     String               @id @default(cuid())
  subject                String?
  message                String?
  timezone               String?              @default("Etc/UTC") @db.Text
  password               String?
  dateFormat             String?              @default("yyyy-MM-dd hh:mm a") @db.Text
  documentId             Int                  @unique
  document               Document             @relation(fields: [documentId], references: [id], onDelete: Cascade)
  redirectUrl            String?
  signingOrder           DocumentSigningOrder @default(PARALLEL)
  allowDictateNextSigner Boolean              @default(false)

  typedSignatureEnabled  Boolean @default(true)
  uploadSignatureEnabled Boolean @default(true)
  drawSignatureEnabled   Boolean @default(true)

  language           String                     @default("en")
  distributionMethod DocumentDistributionMethod @default(EMAIL)
  emailSettings      Json? /// [DocumentEmailSettings] @zod.custom.use(ZDocumentEmailSettingsSchema)
}

enum ReadStatus {
  NOT_OPENED
  OPENED
}

enum SendStatus {
  NOT_SENT
  SENT
}

enum SigningStatus {
  NOT_SIGNED
  SIGNED
  REJECTED
}

enum RecipientRole {
  CC
  SIGNER
  VIEWER
  APPROVER
  ASSISTANT
}

/// @zod.import(["import { ZRecipientAuthOptionsSchema } from '@documenso/lib/types/document-auth';"])
model Recipient {
  id                Int           @id @default(autoincrement())
  documentId        Int?
  templateId        Int?
  email             String        @db.VarChar(255)
  name              String        @default("") @db.VarChar(255)
  token             String
  documentDeletedAt DateTime?
  expired           DateTime?
  signedAt          DateTime?
  authOptions       Json? /// [RecipientAuthOptions] @zod.custom.use(ZRecipientAuthOptionsSchema)
  signingOrder      Int? /// @zod.number.describe("The order in which the recipient should sign the document. Only works if the document is set to sequential signing.")
  rejectionReason   String?
  role              RecipientRole @default(SIGNER)
  readStatus        ReadStatus    @default(NOT_OPENED)
  signingStatus     SigningStatus @default(NOT_SIGNED)
  sendStatus        SendStatus    @default(NOT_SENT)
  document          Document?     @relation(fields: [documentId], references: [id], onDelete: Cascade)
  template          Template?     @relation(fields: [templateId], references: [id], onDelete: Cascade)
  fields            Field[]
  signatures        Signature[]

  @@unique([documentId, email])
  @@unique([templateId, email])
  @@index([documentId])
  @@index([templateId])
  @@index([token])
}

model Task {
  id          Int            @id @default(autoincrement())
  externalId  String? /// @zod.string.describe("A custom external ID you can use to identify the task.")
  userId      Int /// @zod.number.describe("The ID of the user that created this task.")
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  status      TaskStatus     @default(PENDING)
  priority    TaskPriority   @default(MEDIUM)
  dueDate     DateTime?
  assignees   TaskAssignee[]
  comments    TaskComment[]

  tags         String[]  @default([])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  completedAt  DateTime?
  deletedAt    DateTime?
  teamId       Int?
  projectId    Int?
  parentTaskId Int?

  team       Team?    @relation(fields: [teamId], references: [id])
  project    Project? @relation(fields: [projectId], references: [id])
  parentTask Task?    @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  subtasks   Task[]   @relation("TaskHierarchy")

  auditLogs TaskAuditLog[]

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([teamId])
  @@index([projectId])
}

model TaskAssignee {
  id         Int      @id @default(autoincrement())
  taskId     Int
  userId     Int
  assignedAt DateTime @default(now())
  assignedBy Int /// User who assigned the task

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}

model TaskComment {
  id        Int      @id @default(autoincrement())
  taskId    Int
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}

model TaskAttachment {
  id        Int      @id @default(autoincrement())
  taskId    Int? // Requerido
  userId    Int // Requerido
  name      String // Requerido
  createdAt DateTime @default(now()) // Automático
  user      User     @relation(fields: [userId], references: [id])
}

model TaskAuditLog {
  id        String   @id @default(cuid())
  taskId    Int
  createdAt DateTime @default(now())
  type      String
  data      Json

  // Details of the person who performed the action which caused the audit log.
  name      String?
  email     String?
  userId    Int?
  userAgent String?
  ipAddress String?

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Modelo opcional para proyectos (si necesitas agrupar tareas)
model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      ProjectStatus @default(ACTIVE)
  teamId      Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt

  team  Team?  @relation(fields: [teamId], references: [id])
  tasks Task[]
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  ON_HOLD
}

enum FieldType {
  SIGNATURE
  FREE_SIGNATURE
  INITIALS
  NAME
  EMAIL
  DATE
  TEXT
  NUMBER
  RADIO
  CHECKBOX
  DROPDOWN
}

/// @zod.import(["import { ZFieldMetaNotOptionalSchema } from '@documenso/lib/types/field-meta';"])
model Field {
  id          Int        @id @default(autoincrement())
  secondaryId String     @unique @default(cuid())
  documentId  Int?
  templateId  Int?
  recipientId Int
  type        FieldType
  page        Int /// @zod.number.describe("The page number of the field on the document. Starts from 1.")
  positionX   Decimal    @default(0)
  positionY   Decimal    @default(0)
  width       Decimal    @default(-1)
  height      Decimal    @default(-1)
  customText  String
  inserted    Boolean
  document    Document?  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  template    Template?  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  recipient   Recipient  @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  signature   Signature?
  fieldMeta   Json? /// [FieldMeta] @zod.custom.use(ZFieldMetaNotOptionalSchema)

  @@index([documentId])
  @@index([templateId])
  @@index([recipientId])
}

model Signature {
  id                     Int      @id @default(autoincrement())
  created                DateTime @default(now())
  recipientId            Int
  fieldId                Int      @unique
  signatureImageAsBase64 String?
  typedSignature         String?

  recipient Recipient @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  field     Field     @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([recipientId])
}

model DocumentShareLink {
  id         Int      @id @default(autoincrement())
  email      String
  slug       String   @unique
  documentId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, email])
}

enum TeamMemberRole {
  ADMIN
  MANAGER
  MEMBER
}

enum TeamMemberInviteStatus {
  ACCEPTED
  PENDING
  DECLINED
}

model TeamGlobalSettings {
  teamId                    Int                @unique
  documentVisibility        DocumentVisibility @default(EVERYONE)
  documentLanguage          String             @default("en")
  includeSenderDetails      Boolean            @default(true)
  includeSigningCertificate Boolean            @default(true)

  typedSignatureEnabled  Boolean @default(true)
  uploadSignatureEnabled Boolean @default(true)
  drawSignatureEnabled   Boolean @default(true)

  brandingEnabled        Boolean @default(false)
  brandingLogo           String  @default("")
  brandingUrl            String  @default("")
  brandingCompanyDetails String  @default("")
  brandingHidePoweredBy  Boolean @default(false)

  allowEmbeddedAuthoring Boolean @default(false)

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Chat {
  id         String   @id @default(cuid())
  createdAt  DateTime
  title      String   @db.Text
  userId     Int
  documentId Int?
  teamId     Int?
  visibility String   @default("private") @db.VarChar(255)

  user       User                @relation(fields: [userId], references: [id])
  document   Document?           @relation(fields: [documentId], references: [id])
  team       Team?               @relation(fields: [teamId], references: [id])
  messagesV1 MessageDeprecated[]
  messagesV2 Message[]
  votesV1    VoteDeprecated[]
  votesV2    Vote[]

  @@map("Chat")
}

model Vote {
  chatId    String
  messageId String
  isUpvoted Boolean

  chat    Chat    @relation(fields: [chatId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@id([chatId, messageId])
  @@map("Vote_v2")
}

model VoteDeprecated {
  chatId    String
  messageId String
  isUpvoted Boolean

  chat    Chat              @relation(fields: [chatId], references: [id])
  message MessageDeprecated @relation(fields: [messageId], references: [id])

  @@id([chatId, messageId])
  @@map("Vote")
}

model Message {
  id          String   @id @default(cuid())
  chatId      String
  role        String   @db.VarChar(255)
  parts       Json
  attachments Json
  createdAt   DateTime

  chat  Chat   @relation(fields: [chatId], references: [id])
  votes Vote[]

  @@map("MessageV2")
}

model MessageDeprecated {
  id        String   @id @default(cuid())
  chatId    String
  role      String   @db.VarChar(255)
  content   Json
  createdAt DateTime

  chat  Chat             @relation(fields: [chatId], references: [id])
  votes VoteDeprecated[]

  @@map("Message")
}

model Team {
  id                   Int                       @id @default(autoincrement())
  name                 String
  url                  String                    @unique
  createdAt            DateTime                  @default(now())
  avatarImageId        String?
  customerId           String?                   @unique
  ownerUserId          Int
  members              TeamMember[]
  invites              TeamMemberInvite[]
  teamEmail            TeamEmail?
  emailVerification    TeamEmailVerification?
  transferVerification TeamTransferVerification?
  teamGlobalSettings   TeamGlobalSettings?
  avatarImage          AvatarImage?              @relation(fields: [avatarImageId], references: [id], onDelete: SetNull)
  profile              TeamProfile?
  owner                User                      @relation(fields: [ownerUserId], references: [id], onDelete: Cascade)
  subscription         Subscription?
  // events               Event[]
  documents            Document[]
  tasks                Task[]
  templates            Template[]
  projects             Project[]
  songs                Songs[]
  artists              Artist[]
  Chat                 Chat[]
  contractTemplates    ContractTemplate[]
  folders              Folder[]
  apiTokens            ApiToken[]
  webhooks             Webhook[]
}

model ContractTemplate {
  id        Int       @id @default(autoincrement())
  name      String?   @db.VarChar(100)
  body      String?
  url       String?   @db.Text
  type      String?
  status    String?
  teamId    Int?
  team      Team?     @relation(fields: [teamId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@map("ContractTemplates")
}

model TeamPending {
  id          Int      @id @default(autoincrement())
  name        String
  url         String   @unique
  createdAt   DateTime @default(now())
  customerId  String   @unique
  ownerUserId Int

  owner User @relation(fields: [ownerUserId], references: [id], onDelete: Cascade)
}

model TeamMember {
  id        Int            @id @default(autoincrement())
  teamId    Int
  createdAt DateTime       @default(now())
  role      TeamMemberRole
  userId    Int
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model TeamEmail {
  teamId    Int      @id @unique
  createdAt DateTime @default(now())
  name      String
  email     String   @unique
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model TeamEmailVerification {
  teamId    Int      @id @unique
  name      String
  email     String
  token     String   @unique
  completed Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model TeamTransferVerification {
  teamId              Int      @id @unique
  userId              Int
  name                String
  email               String
  token               String   @unique
  completed           Boolean  @default(false)
  expiresAt           DateTime
  createdAt           DateTime @default(now())
  clearPaymentMethods Boolean  @default(false)

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model TeamMemberInvite {
  id        Int                    @id @default(autoincrement())
  teamId    Int
  createdAt DateTime               @default(now())
  email     String
  status    TeamMemberInviteStatus @default(PENDING)
  role      TeamMemberRole
  token     String                 @unique
  team      Team                   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
}

enum TemplateType {
  PUBLIC
  PRIVATE
}

/// @zod.import(["import { ZDocumentEmailSettingsSchema } from '@documenso/lib/types/document-email';"])
model TemplateMeta {
  id                     String                     @id @default(cuid())
  subject                String?
  message                String?
  timezone               String?                    @default("Etc/UTC") @db.Text
  password               String?
  dateFormat             String?                    @default("yyyy-MM-dd hh:mm a") @db.Text
  signingOrder           DocumentSigningOrder?      @default(PARALLEL)
  allowDictateNextSigner Boolean                    @default(false)
  distributionMethod     DocumentDistributionMethod @default(EMAIL)

  typedSignatureEnabled  Boolean @default(true)
  uploadSignatureEnabled Boolean @default(true)
  drawSignatureEnabled   Boolean @default(true)

  templateId    Int      @unique
  template      Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  redirectUrl   String?
  language      String   @default("en")
  emailSettings Json? /// [DocumentEmailSettings] @zod.custom.use(ZDocumentEmailSettingsSchema)
}

/// @zod.import(["import { ZDocumentAuthOptionsSchema } from '@documenso/lib/types/document-auth';"])
model Template {
  id                     Int                @id @default(autoincrement())
  externalId             String?
  type                   TemplateType       @default(PRIVATE)
  title                  String
  userId                 Int
  teamId                 Int?
  visibility             DocumentVisibility @default(EVERYONE)
  authOptions            Json? /// [DocumentAuthOptions] @zod.custom.use(ZDocumentAuthOptionsSchema)
  templateMeta           TemplateMeta?
  templateDocumentDataId String
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @default(now()) @updatedAt
  publicTitle            String             @default("")
  publicDescription      String             @default("")

  useLegacyFieldInsertion Boolean @default(false)

  team                 Team?               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  templateDocumentData DocumentData        @relation(fields: [templateDocumentDataId], references: [id], onDelete: Cascade)
  user                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipients           Recipient[]
  fields               Field[]
  directLink           TemplateDirectLink?
  documents            Document[]
  folder               Folder?             @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId             String?

  @@unique([templateDocumentDataId])
}

model TemplateDirectLink {
  id         String   @id @unique @default(cuid())
  templateId Int      @unique
  token      String   @unique
  createdAt  DateTime @default(now())
  enabled    Boolean

  directTemplateRecipientId Int

  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model SiteSettings {
  id                   String   @id
  enabled              Boolean  @default(false)
  data                 Json
  lastModifiedByUserId Int?
  lastModifiedAt       DateTime @default(now())
  lastModifiedByUser   User?    @relation(fields: [lastModifiedByUserId], references: [id], onDelete: SetNull)
}

enum BackgroundJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model BackgroundJob {
  id         String              @id @default(cuid())
  status     BackgroundJobStatus @default(PENDING)
  payload    Json?
  retried    Int                 @default(0)
  maxRetries Int                 @default(3)

  // Taken from the job definition
  jobId   String
  name    String
  version String

  submittedAt   DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  completedAt   DateTime?
  lastRetriedAt DateTime?

  tasks BackgroundJobTask[]
}

enum BackgroundJobTaskStatus {
  PENDING
  COMPLETED
  FAILED
}

model BackgroundJobTask {
  id     String                  @id
  name   String
  status BackgroundJobTaskStatus @default(PENDING)

  result     Json?
  retried    Int   @default(0)
  maxRetries Int   @default(3)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  jobId         String
  backgroundJob BackgroundJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model AvatarImage {
  id    String @id @default(cuid())
  bytes String

  team Team[]
  user User[]
}
